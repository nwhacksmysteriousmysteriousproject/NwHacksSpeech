{"version":3,"sources":["../../src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","file":"ServiceRecognizerBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    RequestSession,\r\n    SpeechDetected,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n    private privAudioSource: IAudioSource;\r\n    private privSpeechConfigConnectionId: string;\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n    private privConnectionId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privRecognizer: Recognizer;\r\n    private privMustReportEndOfStream: boolean;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public recognize(\r\n        speechContextJson: string,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> {\r\n        const requestSession = new RequestSession(this.privAudioSource.id(), speechContextJson);\r\n\r\n        requestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        return this.audioSource\r\n            .attach(requestSession.audioNodeId)\r\n            .continueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                let audioNode: ReplayableAudioNode;\r\n\r\n                if (result.isError) {\r\n                    this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error, successCallback);\r\n                    return PromiseHelper.fromError<boolean>(result.error);\r\n                } else {\r\n                    audioNode = new ReplayableAudioNode(result.result, this.audioSource.format as AudioStreamFormatImpl);\r\n                    requestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n                }\r\n\r\n                return this.configureConnection(requestSession)\r\n                    .on((_: IConnection) => {\r\n\r\n                        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.sessionStarted) {\r\n                            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                        }\r\n\r\n                        const messageRetrievalPromise = this.receiveMessage(requestSession, successCallback, errorCallBack);\r\n                        const audioSendPromise = this.sendAudio(audioNode, requestSession);\r\n\r\n                        /* tslint:disable:no-empty */\r\n                        audioSendPromise.on((_: boolean) => { }, (error: string) => {\r\n                            this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                        });\r\n\r\n                        const completionPromise = PromiseHelper.whenAll([messageRetrievalPromise, audioSendPromise]);\r\n\r\n                        return completionPromise.on((r: boolean) => {\r\n                            requestSession.dispose();\r\n                            this.sendTelemetryData(requestSession, requestSession.getTelemetry());\r\n                        }, (error: string) => {\r\n                            requestSession.dispose(error);\r\n                            this.sendTelemetryData(requestSession, requestSession.getTelemetry());\r\n                            this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                        });\r\n\r\n                    }, (error: string) => {\r\n                        this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error, successCallback);\r\n                    }).on(() => {\r\n                        return requestSession.completionPromise;\r\n                    }, (error: string) => {\r\n                        this.cancelRecognitionLocal(requestSession, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                    }).onSuccessContinueWithPromise((_: IConnection): Promise<boolean> => {\r\n                        return PromiseHelper.fromResult(true);\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        requestSession: RequestSession,\r\n        connection: IConnection,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void;\r\n\r\n    protected sendTelemetryData = (requestSession: RequestSession, telemetryData: string) => {\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed) {\r\n            return PromiseHelper.fromResult(true);\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        return this.fetchConnection(requestSession).onSuccessContinueWith((connection: IConnection): Promise<boolean> => {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n        });\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string,\r\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void;\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognitionLocal(\r\n        requestSession: RequestSession,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string,\r\n        cancelRecoCallback: (r: SpeechRecognitionResult) => void): void {\r\n\r\n        if (!requestSession.isCanceled) {\r\n            requestSession.onCancelled();\r\n\r\n            this.cancelRecognition(\r\n                requestSession.sessionId,\r\n                requestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error,\r\n                cancelRecoCallback);\r\n        }\r\n    }\r\n\r\n    private fetchConnection = (requestSession: RequestSession): Promise<IConnection> => {\r\n        return this.configureConnection(requestSession);\r\n    }\r\n\r\n    private configureConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection(requestSession);\r\n            } else {\r\n                // requestSession.onConnectionEstablishCompleted(200);\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        requestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionConfigurationPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    requestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    requestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n                requestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        requestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        requestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                        //  requestSession.listenForServiceTelemetry(this.privConnectionFetchPromise.result().result.events);\r\n                        return this.sendSpeechConfig(connection, requestSession, this.privRecognizerConfig.platformConfig.serialize())\r\n                            .onSuccessContinueWithPromise((_: boolean) => {\r\n                                return this.sendSpeechContext(connection, requestSession, requestSession.contextJson).onSuccessContinueWith((_: boolean) => {\r\n                                    return connection;\r\n                                });\r\n                            });\r\n\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.configureConnection(requestSession, true);\r\n                    } else {\r\n                        requestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    private receiveMessage = (\r\n        requestSession: RequestSession,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<IConnection> => {\r\n        return this.fetchConnection(requestSession).on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (requestSession.isCompleted) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage(requestSession, successCallback, errorCallBack);\r\n                        }\r\n                    }\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === requestSession.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privMustReportEndOfStream = true;\r\n                                break;\r\n                            case \"speech.startdetected\":\r\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, requestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechStartDetected) {\r\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                                }\r\n\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n\r\n                                let json: string;\r\n\r\n                                if (connectionMessage.textBody.length > 0) {\r\n                                    json = connectionMessage.textBody;\r\n                                } else {\r\n                                    // If the request was empty, the JSON returned is empty.\r\n                                    json = \"{ Offset: 0 }\";\r\n                                }\r\n\r\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                                requestSession.onServiceRecognized(speechStopDetected.Offset + requestSession.currentTurnAudioOffset);\r\n\r\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + requestSession.currentTurnAudioOffset, requestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechEndDetected) {\r\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                if (requestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                                    this.privMustReportEndOfStream = false;\r\n                                    this.cancelRecognitionLocal(requestSession, CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined, successCallback);\r\n                                }\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.sessionId);\r\n                                requestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || requestSession.isSpeechEnded) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n\r\n                                    return PromiseHelper.fromResult(true);\r\n                                } else {\r\n                                    this.fetchConnection(requestSession).onSuccessContinueWith((connection: IConnection) => {\r\n                                        this.sendSpeechContext(connection, requestSession, requestSession.contextJson);\r\n                                    });\r\n                                }\r\n                            default:\r\n                                this.processTypeSpecificMessages(\r\n                                    connectionMessage,\r\n                                    requestSession,\r\n                                    connection,\r\n                                    successCallback,\r\n                                    errorCallBack);\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage(requestSession, successCallback, errorCallBack);\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    private sendSpeechConfig = (connection: IConnection, requestSession: RequestSession, speechConfigJson: string): Promise<boolean> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(speechConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            speechConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (speechConfigJson && this.privConnectionId !== this.privSpeechConfigConnectionId) {\r\n            this.privSpeechConfigConnectionId = this.privConnectionId;\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                speechConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendSpeechContext = (connection: IConnection, requestSession: RequestSession, speechContextJson: string): Promise<boolean> => {\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendAudio = (\r\n        audioStreamNode: IAudioStreamNode,\r\n        requestSession: RequestSession): Promise<boolean> => {\r\n        // NOTE: Home-baked promises crash ios safari during the invocation\r\n        // of the error callback chain (looks like the recursion is way too deep, and\r\n        // it blows up the stack). The following construct is a stop-gap that does not\r\n        // bubble the error up the callback chain and hence circumvents this problem.\r\n        // TODO: rewrite with ES6 promises.\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        // The time we last sent data to the service.\r\n        let lastSendTime: number = Date.now();\r\n\r\n        const audioFormat: AudioStreamFormatImpl = this.privAudioSource.format as AudioStreamFormatImpl;\r\n\r\n        const readAndUploadCycle = () => {\r\n\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed && !requestSession.isSpeechEnded && !requestSession.isCompleted) {\r\n                this.fetchConnection(requestSession).on((connection: IConnection) => {\r\n                    audioStreamNode.read().on(\r\n                        (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n\r\n                            // we have a new audio chunk to upload.\r\n                            if (requestSession.isSpeechEnded) {\r\n                                // If service already recognized audio end then dont send any more audio\r\n                                deferred.resolve(true);\r\n                                return;\r\n                            }\r\n\r\n                            const payload = (audioStreamChunk.isEnd) ? null : audioStreamChunk.buffer;\r\n                            const uploaded: Promise<boolean> = connection.send(\r\n                                new SpeechConnectionMessage(\r\n                                    MessageType.Binary, \"audio\", requestSession.requestId, null, payload));\r\n\r\n                            if (!audioStreamChunk.isEnd) {\r\n\r\n                                // Caculate any delay to the audio stream needed. /2 to allow 2x real time transmit rate max.\r\n                                const minSendTime = ((payload.byteLength / audioFormat.avgBytesPerSec) / 2) * 1000;\r\n\r\n                                const delay: number = Math.max(0, (lastSendTime - Date.now() + minSendTime));\r\n\r\n                                uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n                                    // Regardless of success or failure, schedule the next upload.\r\n                                    // If the underlying connection was broken, the next cycle will\r\n                                    // get a new connection and re-transmit missing audio automatically.\r\n                                    setTimeout(() => {\r\n                                        lastSendTime = Date.now();\r\n                                        readAndUploadCycle();\r\n                                    }, delay);\r\n                                });\r\n                            } else {\r\n                                // the audio stream has been closed, no need to schedule next\r\n                                // read-upload cycle.\r\n                                requestSession.onSpeechEnded();\r\n                                deferred.resolve(true);\r\n                            }\r\n                        },\r\n                        (error: string) => {\r\n                            if (requestSession.isSpeechEnded) {\r\n                                // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                // means that sometimes things can be rejected in normal circumstances, without\r\n                                // any errors.\r\n                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                            } else {\r\n                                // Only reject, if there was a proper error.\r\n                                deferred.reject(error);\r\n                            }\r\n                        });\r\n                }, (error: string) => {\r\n                    deferred.reject(error);\r\n                });\r\n            }\r\n        };\r\n\r\n        readAndUploadCycle();\r\n\r\n        return deferred.promise();\r\n    }\r\n}\r\n"]}